/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */

package internship_2

import kotlin.test.*

import java.nio.file.*


class CleanupHelper {
    fun deleteDirectory(directory: Path?) {
        Files.walk(directory)
            .sorted(Comparator.reverseOrder())
            .map { it.toFile() }
            .forEach { it.delete() }
    }
}

class AppTest {
    @Test fun fileGeneratesPath() {
        val file = FSFile(name="file")
        assertNotNull(file.getPaths(), "empty response")
        assertEquals(file.getPaths(), setOf("file"))
    }

    @Test fun folderGeneratesPath() {
        val folder = FSFolder(name="folder")
        assertNotNull(folder.getPaths(), "empty response")
        assertEquals(folder.getPaths(), setOf("folder/")) // Folder ends with a /
    }

    @Test fun filledFolderGeneratesPath() {
        val folder = FSFolder(name="folder", content=setOf(FSFile(name="file1"), FSFile(name="file2")))
        assertEquals(folder.getPaths(), setOf("folder/", "folder/file1", "folder/file2"))
    }

    @Test fun convolutedFolderGeneratesPath() {
        val folder1 = FSFolder(name="folder1", content=setOf(FSFile(name="file1"), FSFile(name="file2")))
        val folder2 = FSFolder(name="folder2", content=emptySet())
        val folder3 = FSFolder(name="folder3", content=setOf(FSFile(name="file1"), FSFile(name="file2"), folder1, folder2))
        val mainFolder = FSFolder(name="main_folder", content=setOf(folder1, folder2, folder3))

        assertEquals(mainFolder.getPaths(), setOf("main_folder/folder1/file1", "main_folder/folder1/file2",
                                                "main_folder/folder1/", "main_folder/folder2/",
                                                "main_folder/folder3/file1", "main_folder/folder3/file2",
                                                "main_folder/folder3/folder1/file1", "main_folder/folder3/folder1/file2",
                                                "main_folder/folder3/folder1/", "main_folder/folder3/folder2/",
                                                "main_folder/folder3/", "main_folder/"))
    }

    @Test fun simpleCreator() {
        val folder = FSFolder(name="folder", content=setOf(FSFile(name="file")))
        val creator = FSCreator()
    
        creator.create(folder, "./test_folder")
        
        val path = Paths.get("./test_folder/folder/file")
        assertEquals(Files.exists(path), true)
    
        // Cleanup
        val test_root = Paths.get("./test_folder/")
        val h = CleanupHelper()

        h.deleteDirectory(test_root);
    }

    @Test fun convolutedCreator() {
        val folder1 = FSFolder(name="folder1", content=setOf(FSFile(name="file1"), FSFile(name="file2")))
        val folder2 = FSFolder(name="folder2", content=emptySet())
        val folder3 = FSFolder(name="folder3", content=setOf(FSFile(name="file1"), FSFile(name="file2"), folder1, folder2))
        val mainFolder = FSFolder(name="main_folder", content=setOf(folder1, folder2, folder3))
        val creator = FSCreator()
    
        creator.create(mainFolder, "./test_folder")
        
        for (p in setOf("folder1/file1", "folder1/file2",
                "folder3/file1", "folder3/file2",
                "folder3/folder1/file1", "folder3/folder1/file2")) {
                        assertEquals(Files.exists(Paths.get("./test_folder/main_folder/" +p)), true)
                    }
    
        // Cleanup
        val test_root = Paths.get("./test_folder/")
        val h = CleanupHelper()

        h.deleteDirectory(test_root);
    }
}
